{
  "name": "Advancedoperations",
  "tagline": "",
  "body": "[![Build Status](https://travis-ci.org/royratcliffe/AdvancedOperations.svg?branch=master)](https://travis-ci.org/royratcliffe/AdvancedOperations)\r\n\r\n# Advanced Operations\r\n\r\nSome time ago, at WWDC 2015, Apple released a sample application called\r\nAdvanced NSOperations. You can find the accompanying video presentation on-line\r\n[here](https://developer.apple.com/videos/play/wwdc2015/226/). The code itself\r\nappears under Resources.\r\n\r\nThe presentation along with its sample-code contains some really useful ideas\r\nfor using operations to structure iOS applications (and Mac apps too). Although\r\nApple's tools and frameworks make it pretty easy to construct toy apps, serious\r\napplications require some serious thought and take a considerable amount of\r\neffort to accomplish effectively. iOS applications are really embedded\r\napplications with restricted compute, memory and networking resources. The\r\nunder-utilised NSOperation class has been part of Apple's Foundation framework\r\nfor some time. Yet, it has not been clear exactly when and how to best use it;\r\nand more importantly, when and how to use NSOperation instances *together* in\r\nconcert. The sample code includes some great ideas.\r\n\r\nTrouble is, the Advanced NSOperations sample code can introduce some\r\ncomplications and snags that can be very difficult to track down and debug. The\r\nsample interweaves concepts such as conditions, producing operations, and\r\nobserving operation state changes. This Operations framework __decouples__ the\r\nconcepts as much as possible in order to allow applications to take what they\r\nneed, and not take what they do not need. You might call this Operations\r\ndecoupled, or Operations-lite.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}